package com.example.pocketdeutsch.data.repository

import android.content.Context
import android.util.Log
import com.example.pocketdeutsch.data.model.*
import com.example.pocketdeutsch.utils.PreferencesManager
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await
import kotlin.random.Random

class VocabularyRepository(private val context: Context? = null) {

    private val firestore = FirebaseFirestore.getInstance()
    private val vocabularyCollection = firestore.collection("vocabulary_items")
    private val userVocabularyCollection = firestore.collection("user_vocabulary")
    private val topicsCollection = firestore.collection("topics")
    private val chaptersCollection = firestore.collection("chapters")
    private val textbooksCollection = firestore.collection("textbooks")

    private val preferencesManager = context?.let { PreferencesManager(it) }
    private val auth = FirebaseAuth.getInstance()

    companion object {
        private const val TAG = "VocabularyRepository"
    }

    private fun getCurrentUserId(): String? = auth.currentUser?.uid

    // –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –º–µ—Ç–æ–¥ –¥–æ –≤–∞—à–æ–≥–æ VocabularyRepository –∫–ª–∞—Å—É

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤
    suspend fun getAllTextbooks(): List<Textbook> {
        return try {
            Log.d(TAG, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤...")

            val documents = textbooksCollection.get().await()
            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${documents.size()} –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤")

            val textbooks = documents.mapNotNull { document ->
                try {
                    val data = document.data
                    Textbook(
                        id = document.id,
                        title = data["title"]?.toString() ?: "",
                        description = data["description"]?.toString() ?: "",
                        author = data["author"]?.toString() ?: "",
                        languageLevel = data["language_level"]?.toString() ?: ""
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∞ ${document.id}: ${e.message}", e)
                    null
                }
            }

            Log.d(TAG, "‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${textbooks.size} –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤")
            textbooks
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
    suspend fun getAllWords(): List<VocabularyItem> {
        return try {
            Log.d(TAG, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ª—ñ–≤...")

            val documents = vocabularyCollection.get().await()
            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${documents.size()} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó vocabulary_items")

            if (documents.isEmpty) {
                Log.w(TAG, "‚ö†Ô∏è –ö–æ–ª–µ–∫—Ü—ñ—è vocabulary_items –ø–æ—Ä–æ–∂–Ω—è!")
                return emptyList()
            }

            val words = documents.mapNotNull { document ->
                try {
                    Log.d(TAG, "üìÑ –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${document.id}")
                    Log.d(TAG, "üìÑ –î–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${document.data}")

                    val data = document.data

                    val word = VocabularyItem(
                        id = document.id,
                        topicId = data["topic_id"]?.toString() ?: "",
                        wordDe = data["word_de"]?.toString() ?: "",
                        translation = data["translation"]?.toString() ?: "",
                        partOfSpeech = data["part_of_speech"]?.toString() ?: "",
                        gender = data["gender"]?.toString() ?: "",
                        pluralForm = data["plural_form"]?.toString() ?: "",
                        exampleSentence = data["example_sentence"]?.toString() ?: "",
                        audioUrl = data["audio_url"]?.toString() ?: ""
                    )

                    Log.d(TAG, "‚úÖ –°–ª–æ–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${word.wordDe} -> ${word.translation}")
                    word
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${document.id}: ${e.message}", e)
                    null
                }
            }

            Log.d(TAG, "‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${words.size} —Å–ª—ñ–≤")
            words.forEach { word ->
                Log.d(TAG, "üìù ${word.wordDe} -> ${word.translation} (ID: ${word.id}, Topic: ${word.topicId})")
            }

            words
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª—ñ–≤ –ø–æ —Ç–µ–º—ñ
    suspend fun getWordsByTopic(topicId: String): List<VocabularyItem> {
        return try {
            Log.d(TAG, "üîç –ü–æ—à—É–∫ —Å–ª—ñ–≤ –ø–æ —Ç–µ–º—ñ: $topicId")

            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ topicId –≤ Int –¥–ª—è –ø–æ—à—É–∫—É
            val topicIdInt = topicId.toIntOrNull()
            Log.d(TAG, "üîç Topic ID as Int: $topicIdInt")

            val documents = if (topicIdInt != null) {
                vocabularyCollection
                    .whereEqualTo("topic_id", topicIdInt)
                    .get()
                    .await()
            } else {
                vocabularyCollection
                    .whereEqualTo("topic_id", topicId)
                    .get()
                    .await()
            }

            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${documents.size()} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —Ç–µ–º–∏ $topicId")

            val words = documents.mapNotNull { document ->
                try {
                    val data = document.data
                    VocabularyItem(
                        id = document.id,
                        topicId = data["topic_id"]?.toString() ?: "",
                        wordDe = data["word_de"]?.toString() ?: "",
                        translation = data["translation"]?.toString() ?: "",
                        partOfSpeech = data["part_of_speech"]?.toString() ?: "",
                        gender = data["gender"]?.toString() ?: "",
                        pluralForm = data["plural_form"]?.toString() ?: "",
                        exampleSentence = data["example_sentence"]?.toString() ?: "",
                        audioUrl = data["audio_url"]?.toString() ?: ""
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${document.id}: ${e.message}", e)
                    null
                }
            }

            Log.d(TAG, "‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${words.size} —Å–ª—ñ–≤ –¥–ª—è —Ç–µ–º–∏ $topicId")
            words
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –ø–æ —Ç–µ–º—ñ $topicId: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª—ñ–≤ –ø–æ —á–∞—Å—Ç–∏–Ω—ñ –º–æ–≤–∏
    suspend fun getWordsByPartOfSpeech(partOfSpeech: String): List<VocabularyItem> {
        return try {
            Log.d(TAG, "üîç –ü–æ—à—É–∫ —Å–ª—ñ–≤ –ø–æ —á–∞—Å—Ç–∏–Ω—ñ –º–æ–≤–∏: $partOfSpeech")

            val documents = vocabularyCollection
                .whereEqualTo("part_of_speech", partOfSpeech)
                .get()
                .await()

            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${documents.size()} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —á–∞—Å—Ç–∏–Ω–∏ –º–æ–≤–∏ $partOfSpeech")

            val words = documents.mapNotNull { document ->
                try {
                    val data = document.data
                    VocabularyItem(
                        id = document.id,
                        topicId = data["topic_id"]?.toString() ?: "",
                        wordDe = data["word_de"]?.toString() ?: "",
                        translation = data["translation"]?.toString() ?: "",
                        partOfSpeech = data["part_of_speech"]?.toString() ?: "",
                        gender = data["gender"]?.toString() ?: "",
                        pluralForm = data["plural_form"]?.toString() ?: "",
                        exampleSentence = data["example_sentence"]?.toString() ?: "",
                        audioUrl = data["audio_url"]?.toString() ?: ""
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${document.id}: ${e.message}", e)
                    null
                }
            }

            words
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –ø–æ —á–∞—Å—Ç–∏–Ω—ñ –º–æ–≤–∏: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª—ñ–≤ –ø–æ —Ä–æ–∑–¥—ñ–ª—É
    suspend fun getWordsByChapter(chapterId: String): List<VocabularyItem> {
        return try {
            Log.d(TAG, "üîç –ü–æ—à—É–∫ —Å–ª—ñ–≤ –ø–æ —Ä–æ–∑–¥—ñ–ª—É: $chapterId")

            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ chapterId –≤ Int
            val chapterIdInt = chapterId.toIntOrNull()

            // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–µ–º–∏ —Ä–æ–∑–¥—ñ–ª—É
            val topicsDocuments = if (chapterIdInt != null) {
                topicsCollection
                    .whereEqualTo("chapter_id", chapterIdInt)
                    .get()
                    .await()
            } else {
                topicsCollection
                    .whereEqualTo("chapter_id", chapterId)
                    .get()
                    .await()
            }

            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${topicsDocuments.size()} —Ç–µ–º –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É $chapterId")

            val topicIds = topicsDocuments.mapNotNull { document ->
                try {
                    document.data["id"]?.toString()
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç–µ–º–∏: ${e.message}", e)
                    null
                }
            }

            Log.d(TAG, "üìã Topic IDs: $topicIds")

            if (topicIds.isEmpty()) {
                Log.w(TAG, "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–º –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É $chapterId")
                return emptyList()
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ–º —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É
            val allWords = mutableListOf<VocabularyItem>()
            for (topicId in topicIds) {
                val words = getWordsByTopic(topicId)
                allWords.addAll(words)
                Log.d(TAG, "‚ûï –î–æ–¥–∞–Ω–æ ${words.size} —Å–ª—ñ–≤ –∑ —Ç–µ–º–∏ $topicId")
            }

            Log.d(TAG, "‚úÖ –ó–∞–≥–∞–ª–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${allWords.size} —Å–ª—ñ–≤ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É $chapterId")
            allWords
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –ø–æ —Ä–æ–∑–¥—ñ–ª—É: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–µ–º
    suspend fun getAllTopics(): List<Topic> {
        return try {
            Log.d(TAG, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–µ–º...")

            val documents = topicsCollection.get().await()
            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${documents.size()} —Ç–µ–º")

            val topics = documents.mapNotNull { document ->
                try {
                    val data = document.data
                    Topic(
                        id = document.id,
                        chapterId = data["chapter_id"]?.toString() ?: "",
                        title = data["title"]?.toString() ?: "",
                        topicNum = (data["topic_num"] as? Long)?.toInt() ?: 0,
                        description = data["description"]?.toString() ?: ""
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–º–∏ ${document.id}: ${e.message}", e)
                    null
                }
            }

            Log.d(TAG, "‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${topics.size} —Ç–µ–º")
            topics
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–º –ø–æ —Ä–æ–∑–¥—ñ–ª—É
    suspend fun getTopicsByChapter(chapterId: String): List<Topic> {
        return try {
            val chapterIdInt = chapterId.toIntOrNull()

            val documents = if (chapterIdInt != null) {
                topicsCollection
                    .whereEqualTo("chapter_id", chapterIdInt)
                    .get()
                    .await()
            } else {
                topicsCollection
                    .whereEqualTo("chapter_id", chapterId)
                    .get()
                    .await()
            }

            documents.mapNotNull { document ->
                try {
                    val data = document.data
                    Topic(
                        id = document.id,
                        chapterId = data["chapter_id"]?.toString() ?: "",
                        title = data["title"]?.toString() ?: "",
                        topicNum = (data["topic_num"] as? Long)?.toInt() ?: 0,
                        description = data["description"]?.toString() ?: ""
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–º–∏ ${document.id}: ${e.message}", e)
                    null
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º –ø–æ —Ä–æ–∑–¥—ñ–ª—É: ${e.message}", e)
            throw e
        }
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤
    suspend fun getAllChapters(): List<Chapter> {
        return try {
            val documents = chaptersCollection.get().await()
            documents.mapNotNull { document ->
                try {
                    val data = document.data
                    Chapter(
                        id = document.id,
                        textbookId = data["textbook_id"]?.toString() ?: "",
                        title = data["title"]?.toString() ?: "",
                        chapterNum = (data["chapter_num"] as? Long)?.toInt() ?: 0,
                        description = data["description"]?.toString() ?: ""
                    )
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–æ–∑–¥—ñ–ª—É ${document.id}: ${e.message}", e)
                    null
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—ñ–≤: ${e.message}", e)
            throw e
        }
    }

    // –í–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –¥–Ω—è
    suspend fun getWordOfTheDay(): VocabularyItem? {
        return try {
            preferencesManager?.let { prefs ->
                val (wordId, germanWord, translation) = prefs.getTodaysWordOfDay()
                if (wordId != null && germanWord != null && translation != null) {
                    return VocabularyItem(
                        id = wordId,
                        wordDe = germanWord,
                        translation = translation
                    )
                }
            }

            getRandomWord()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª–æ–≤–∞ –¥–Ω—è: ${e.message}", e)
            throw e
        }
    }

    suspend fun getRandomWord(): VocabularyItem? {
        return try {
            val documents = vocabularyCollection.get().await()

            if (documents.isEmpty) {
                return null
            }

            val randomIndex = Random.nextInt(documents.size())
            val randomDocument = documents.documents[randomIndex]
            val data = randomDocument.data

            val vocabularyItem = VocabularyItem(
                id = randomDocument.id,
                topicId = data?.get("topic_id")?.toString() ?: "",
                wordDe = data?.get("word_de")?.toString() ?: "",
                translation = data?.get("translation")?.toString() ?: "",
                partOfSpeech = data?.get("part_of_speech")?.toString() ?: "",
                gender = data?.get("gender")?.toString() ?: "",
                pluralForm = data?.get("plural_form")?.toString() ?: "",
                exampleSentence = data?.get("example_sentence")?.toString() ?: "",
                audioUrl = data?.get("audio_url")?.toString() ?: ""
            )

            vocabularyItem.let { word ->
                preferencesManager?.let { prefs ->
                    if (prefs.isNewDay()) {
                        prefs.saveWordOfTheDay(word.id, word.wordDe, word.translation)
                    }
                }
            }

            vocabularyItem
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: ${e.message}", e)
            throw e
        }
    }

    // –ü–æ—à—É–∫ —Å–ª—ñ–≤
    suspend fun searchWords(query: String): List<VocabularyItem> {
        return try {
            Log.d(TAG, "üîç –ü–æ—à—É–∫ —Å–ª—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: '$query'")

            val allWords = getAllWords()
            Log.d(TAG, "üìä –ó–∞–≥–∞–ª–æ–º —Å–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É: ${allWords.size}")

            val filteredWords = allWords.filter { word ->
                word.wordDe.contains(query, ignoreCase = true) ||
                        word.translation.contains(query, ignoreCase = true) ||
                        word.exampleSentence.contains(query, ignoreCase = true)
            }

            Log.d(TAG, "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${filteredWords.size} —Å–ª—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '$query'")
            filteredWords
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ª—ñ–≤: ${e.message}", e)
            throw e
        }
    }

    // –£–ª—é–±–ª–µ–Ω—ñ —Å–ª–æ–≤–∞
    suspend fun getFavoriteWords(): List<VocabularyItem> {
        return try {
            val userId = getCurrentUserId()
            Log.d(TAG, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $userId")

            if (userId == null) {
                Log.w(TAG, "‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                return emptyList()
            }

            val favoriteDocuments = userVocabularyCollection
                .whereEqualTo("user_id", userId)
                .whereEqualTo("favorite", true)
                .get()
                .await()

            Log.d(TAG, "üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${favoriteDocuments.size()} —É–ª—é–±–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")

            // –î–û–î–ê–ù–û: –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            favoriteDocuments.forEach { doc ->
                Log.d(TAG, "üìÑ User vocabulary doc: ${doc.id}")
                Log.d(TAG, "üìÑ Data: ${doc.data}")
            }

            val favoriteWordIds = favoriteDocuments.mapNotNull { document ->
                try {
                    val data = document.data
                    val wordId = data["vocabulary_item_id"]?.toString()
                    Log.d(TAG, "üìã Extracted word ID: $wordId")
                    wordId
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Å–ª–æ–≤–∞: ${e.message}", e)
                    null
                }
            }

            Log.d(TAG, "üìã Favorite word IDs: $favoriteWordIds")

            if (favoriteWordIds.isEmpty()) {
                Log.d(TAG, "üìù –ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Å–ª—ñ–≤")
                return emptyList()
            }

            val words = mutableListOf<VocabularyItem>()
            for (wordId in favoriteWordIds) {
                Log.d(TAG, "üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª–æ–≤–∞ –∑ ID: $wordId")
                val word = getWordById(wordId)
                if (word != null) {
                    words.add(word)
                    Log.d(TAG, "‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–ª–æ–≤–æ: ${word.wordDe}")
                } else {
                    Log.w(TAG, "‚ö†Ô∏è –°–ª–æ–≤–æ –∑ ID $wordId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                }
            }

            Log.d(TAG, "‚úÖ –ó–∞–≥–∞–ª–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${words.size} —É–ª—é–±–ª–µ–Ω–∏—Ö —Å–ª—ñ–≤")
            words
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö —Å–ª—ñ–≤: ${e.message}", e)
            throw e
        }
    }

    suspend fun getWordById(wordId: String): VocabularyItem? {
        return try {
            Log.d(TAG, "üîç –ü–æ—à—É–∫ —Å–ª–æ–≤–∞ –∑–∞ ID: $wordId")

            val document = vocabularyCollection.document(wordId).get().await()

            if (document.exists()) {
                val data = document.data!!
                val word = VocabularyItem(
                    id = document.id,
                    topicId = data["topic_id"]?.toString() ?: "",
                    wordDe = data["word_de"]?.toString() ?: "",
                    translation = data["translation"]?.toString() ?: "",
                    partOfSpeech = data["part_of_speech"]?.toString() ?: "",
                    gender = data["gender"]?.toString() ?: "",
                    pluralForm = data["plural_form"]?.toString() ?: "",
                    exampleSentence = data["example_sentence"]?.toString() ?: "",
                    audioUrl = data["audio_url"]?.toString() ?: ""
                )

                Log.d(TAG, "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ: ${word.wordDe}")
                return word
            } else {
                Log.w(TAG, "‚ö†Ô∏è –°–ª–æ–≤–æ –∑ ID $wordId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            }

            null
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ª–æ–≤–∞ –∑–∞ ID: ${e.message}", e)
            throw e
        }
    }

    suspend fun addToFavorites(vocabularyItemId: String): Boolean {
        return try {
            val userId = getCurrentUserId() ?: return false
            Log.d(TAG, "‚ûï –î–æ–¥–∞—î–º–æ —Å–ª–æ–≤–æ $vocabularyItemId –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ $userId")

            val existingDocuments = userVocabularyCollection
                .whereEqualTo("user_id", userId)
                .whereEqualTo("vocabulary_item_id", vocabularyItemId)
                .get()
                .await()

            Log.d(TAG, "üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${existingDocuments.size()} —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")

            if (existingDocuments.isEmpty) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –¥–∞–Ω–∏—Ö –≤—Ä—É—á–Ω—É –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤
                val userVocabularyData = mapOf(
                    "user_id" to userId,
                    "vocabulary_item_id" to vocabularyItemId,
                    "favorite" to true
                )

                Log.d(TAG, "üìù –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∑ –¥–∞–Ω–∏–º–∏: $userVocabularyData")

                val docRef = userVocabularyCollection.add(userVocabularyData).await()
                Log.d(TAG, "‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∑ ID: ${docRef.id}")

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
                val savedDoc = userVocabularyCollection.document(docRef.id).get().await()
                Log.d(TAG, "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç:")
                Log.d(TAG, "    - Document exists: ${savedDoc.exists()}")
                Log.d(TAG, "    - Document data: ${savedDoc.data}")

            } else {
                val document = existingDocuments.documents.first()
                Log.d(TAG, "üìù –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å: ${document.id}")
                userVocabularyCollection.document(document.id)
                    .update("favorite", true)
                    .await()
                Log.d(TAG, "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö")
            }

            // –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            Log.d(TAG, "üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:")
            val testQuery = userVocabularyCollection
                .whereEqualTo("user_id", userId)
                .whereEqualTo("favorite", true)
                .get()
                .await()

            Log.d(TAG, "üß™ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –∑–Ω–∞–π—à–æ–≤ ${testQuery.size()} –∑–∞–ø–∏—Å—ñ–≤")
            testQuery.forEach { doc ->
                Log.d(TAG, "üß™ Test doc: ${doc.id}, data: ${doc.data}")
            }

            true
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö: ${e.message}", e)
            false
        }
    }

    suspend fun removeFromFavorites(vocabularyItemId: String): Boolean {
        return try {
            val userId = getCurrentUserId() ?: return false
            Log.d(TAG, "‚ûñ –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–æ–≤–æ $vocabularyItemId –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ $userId")

            val documents = userVocabularyCollection
                .whereEqualTo("user_id", userId)
                .whereEqualTo("vocabulary_item_id", vocabularyItemId)
                .get()
                .await()

            if (documents.size() > 0) {
                val document = documents.documents.first()
                userVocabularyCollection.document(document.id)
                    .update("favorite", false) // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "favorite"
                    .await()
                Log.d(TAG, "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö")
                return true
            }

            Log.w(TAG, "‚ö†Ô∏è –ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            false
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö: ${e.message}", e)
            false
        }
    }

    suspend fun isWordFavorite(vocabularyItemId: String): Boolean {
        return try {
            val userId = getCurrentUserId() ?: return false

            val documents = userVocabularyCollection
                .whereEqualTo("user_id", userId)
                .whereEqualTo("vocabulary_item_id", vocabularyItemId)
                .whereEqualTo("favorite", true)
                .get()
                .await()

            documents.size() > 0
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–ª—é–±–ª–µ–Ω–æ–≥–æ: ${e.message}", e)
            false
        }
    }
}