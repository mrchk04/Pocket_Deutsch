package com.example.pocketdeutsch.ui.flashcards

import android.util.Log
import android.content.Intent
import android.os.Bundle
import android.view.View
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.pocketdeutsch.data.model.FlashcardSetWithProgress
import com.example.pocketdeutsch.databinding.ActivityFlashcardSetsBinding
import com.example.pocketdeutsch.ui.components.BottomBarManager
import com.example.pocketdeutsch.ui.components.TopBarManager
import com.example.pocketdeutsch.ui.main.MainActivity
import com.example.pocketdeutsch.ui.profile.ProfileActivity
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await

class FlashcardSetsActivity : AppCompatActivity() {

    private lateinit var binding: ActivityFlashcardSetsBinding
    private lateinit var viewModel: FlashcardSetsViewModel
    private lateinit var adapter: FlashcardSetsAdapter
    private lateinit var topBarManager: TopBarManager
    private lateinit var bottomBarManager: BottomBarManager

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityFlashcardSetsBinding.inflate(layoutInflater)
        setContentView(binding.root)
        enableEdgeToEdge()
        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }
        topBarManager = TopBarManager(this)
        bottomBarManager = BottomBarManager(this)

        initializeViewModel()
        setupRecyclerView()
        observeData()
        setupRefreshListener()
        setupTopBarClickListeners()
        setupBottomBarNavigation()
        viewModel.loadUserData()
    }

    private fun setupTopBarClickListeners() {
        // –ö–ª—ñ–∫ –ø–æ –ø—Ä–æ—Ñ—ñ–ª—å–Ω—ñ–π —ñ–∫–æ–Ω—Ü—ñ
        topBarManager.setProfileClickListener {
            navigateToProfile()
//            Toast.makeText(this, "Profile - TODO", Toast.LENGTH_SHORT).show()
        }

        // –ö–ª—ñ–∫ –ø–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—é (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        topBarManager.setGreetingClickListener {
            // TODO: Show user menu or profile
            Toast.makeText(this, "User menu - TODO", Toast.LENGTH_SHORT).show()
        }
    }

    private fun navigateToProfile() {
        val intent = Intent(this, ProfileActivity::class.java)
        startActivity(intent)
    }

    private fun setupBottomBarNavigation() {
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –¥–ª—è bottom bar
        bottomBarManager.setupNavigation(
            homepageActivityClass = MainActivity::class.java,
        )

        bottomBarManager.setWiederholungClickListener {
            // TODO: Navigate to Wiederholung activity
            Toast.makeText(this, "–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è - TODO", Toast.LENGTH_SHORT).show()
        }

        bottomBarManager.setInteressantClickListener {
            // TODO: Navigate to Interessant activity
            Toast.makeText(this, "–¶—ñ–∫–∞–≤–µ - TODO", Toast.LENGTH_SHORT).show()
        }
    }

    private fun debugFirestore() {
        lifecycleScope.launch {
            try {
                Log.d("FlashcardSets", "üîç –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Firestore
                val firestore = FirebaseFirestore.getInstance()

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                val currentUser = FirebaseAuth.getInstance().currentUser
                Log.d("FlashcardSets", "üë§ Current user: ${currentUser?.uid}")
                Log.d("FlashcardSets", "üìß User email: ${currentUser?.email}")

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–±–æ—Ä–∏ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ–∫
                val setsSnapshot = firestore.collection("flashcard_sets")
                    .limit(3)
                    .get()
                    .await()

                Log.d("FlashcardSets", "üìö –ó–Ω–∞–π–¥–µ–Ω–æ ${setsSnapshot.size()} –Ω–∞–±–æ—Ä—ñ–≤ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ–∫")

                setsSnapshot.documents.forEach { doc ->
                    val data = doc.data
                    Log.d("FlashcardSets", "üìã –ù–∞–±—ñ—Ä ${doc.id}: ${data}")

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É
                    val flashcardsSnapshot = firestore.collection("flashcards")
                        .whereEqualTo("flashcard_set_id", doc.id)
                        .limit(3)
                        .get()
                        .await()

                    Log.d("FlashcardSets", "üÉè –§–ª–µ—à-–∫–∞—Ä—Ç–æ–∫ –≤ –Ω–∞–±–æ—Ä—ñ ${doc.id}: ${flashcardsSnapshot.size()}")

                    flashcardsSnapshot.documents.forEach { flashcardDoc ->
                        Log.d("FlashcardSets", "   üìÑ –§–ª–µ—à-–∫–∞—Ä—Ç–∫–∞: ${flashcardDoc.data}")
                    }
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–º–∏
                val topicsSnapshot = firestore.collection("topics")
                    .limit(3)
                    .get()
                    .await()

                Log.d("FlashcardSets", "üéØ –ó–Ω–∞–π–¥–µ–Ω–æ ${topicsSnapshot.size()} —Ç–µ–º")

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ª–æ–≤–Ω–∏–∫–æ–≤—ñ –æ–¥–∏–Ω–∏—Ü—ñ
                val vocabSnapshot = firestore.collection("vocabulary_items")
                    .limit(3)
                    .get()
                    .await()

                Log.d("FlashcardSets", "üìù –ó–Ω–∞–π–¥–µ–Ω–æ ${vocabSnapshot.size()} —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏—Ö –æ–¥–∏–Ω–∏—Ü—å")

                Log.d("FlashcardSets", "‚úÖ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            } catch (e: Exception) {
                Log.e("FlashcardSets", "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", e)
            }
        }
    }

    // –î–æ–¥–∞–π—Ç–µ —Ç–∞–∫–æ–∂ —Ü–µ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–∫—Ä–µ–º–æ–≥–æ –Ω–∞–±–æ—Ä—É
    private fun debugSpecificSet(setId: String) {
        lifecycleScope.launch {
            try {
                val firestore = FirebaseFirestore.getInstance()

                // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –Ω–∞–±—ñ—Ä
                val setDoc = firestore.collection("flashcard_sets")
                    .document(setId)
                    .get()
                    .await()

                Log.d("FlashcardSets", "üîç –ù–∞–±—ñ—Ä $setId —ñ—Å–Ω—É—î: ${setDoc.exists()}")
                Log.d("FlashcardSets", "üìã –î–∞–Ω—ñ –Ω–∞–±–æ—Ä—É: ${setDoc.data}")

                // –®—É–∫–∞—î–º–æ —Ñ–ª–µ—à-–∫–∞—Ä—Ç–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –Ω–∞–±–æ—Ä—É
                val flashcards = firestore.collection("flashcards")
                    .whereEqualTo("flashcard_set_id", setId)
                    .get()
                    .await()

                Log.d("FlashcardSets", "üÉè –ó–Ω–∞–π–¥–µ–Ω–æ ${flashcards.size()} —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ–∫ –¥–ª—è –Ω–∞–±–æ—Ä—É $setId")

                flashcards.documents.forEachIndexed { index, doc ->
                    Log.d("FlashcardSets", "   $index: ${doc.data}")
                }

                // –¢–∞–∫–æ–∂ —Å–ø—Ä–æ–±—É—î–º–æ –∑ —á–∏—Å–ª–æ–≤–∏–º ID (—è–∫—â–æ –≤ –±–∞–∑—ñ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ —á–∏—Å–ª–æ)
                val flashcardsNumeric = firestore.collection("flashcards")
                    .whereEqualTo("flashcard_set_id", setId.toIntOrNull() ?: setId)
                    .get()
                    .await()

                Log.d("FlashcardSets", "üî¢ –ó —á–∏—Å–ª–æ–≤–∏–º ID –∑–Ω–∞–π–¥–µ–Ω–æ ${flashcardsNumeric.size()} —Ñ–ª–µ—à-–∫–∞—Ä—Ç–æ–∫")

            } catch (e: Exception) {
                Log.e("FlashcardSets", "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞–±–æ—Ä—É $setId", e)
            }
        }
    }

    private fun initializeViewModel() {
        viewModel = ViewModelProvider(this)[FlashcardSetsViewModel::class.java]
    }

    private fun setupRecyclerView() {
        adapter = FlashcardSetsAdapter(
            onItemClick = { flashcardSet ->
                openFlashcardSetDetail(flashcardSet)
            },
            onStudyClick = { flashcardSet ->
                startStudying(flashcardSet)
            }
        )

        binding.flashcardSetsRecyclerView.apply {
            layoutManager = LinearLayoutManager(this@FlashcardSetsActivity)
            adapter = this@FlashcardSetsActivity.adapter
        }
    }

    private fun observeData() {

        viewModel.userData.observe(this, Observer { user ->
            if (user != null) {
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤ top bar —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
                topBarManager.updateUserGreeting(user)

                Log.d("MainActivity", "User data loaded: ${user.firstName}")
            } else {
                Log.d("MainActivity", "User data is null")
                topBarManager.updateUserGreeting("Gast") // –ì–æ—Å—Ç—å
            }
        })

        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ —Å–ø–∏—Å–∫–æ–º –Ω–∞–±–æ—Ä—ñ–≤
        viewModel.flashcardSets.observe(this) { flashcardSets ->
            adapter.submitList(flashcardSets)
            updateEmptyState(flashcardSets.isEmpty())
        }

        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        viewModel.userStatistics.observe(this) { statistics ->
            updateUserStatistics(statistics)
        }

        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ —Å—Ç–∞–Ω–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        viewModel.isLoading.observe(this) { isLoading ->
            binding.loadingProgress.visibility = if (isLoading) View.VISIBLE else View.GONE
            binding.flashcardSetsRecyclerView.visibility = if (isLoading) View.GONE else View.VISIBLE
        }

        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –ø–æ–º–∏–ª–∫–∞–º–∏
        viewModel.error.observe(this) { error ->
            error?.let {
                showError(it)
                viewModel.clearError()
            }
        }
    }

    private fun updateUserStatistics(statistics: com.example.pocketdeutsch.data.model.UserStatistics) {
        binding.apply {
            totalStudied.text = statistics.learnedWordsCount.toString()
            totalMastered.text = statistics.flashcardsCompleted.toString()
            currentStreak.text = statistics.studyDaysStreak.toString()
        }
    }

    private fun updateEmptyState(isEmpty: Boolean) {
        binding.emptyState.visibility = if (isEmpty) View.VISIBLE else View.GONE
        binding.flashcardSetsRecyclerView.visibility = if (isEmpty) View.GONE else View.VISIBLE
    }

    private fun setupRefreshListener() {
        // –Ø–∫—â–æ —É –≤–∞—Å —î SwipeRefreshLayout, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç—É—Ç
        // –ê–±–æ –¥–æ–¥–∞—Ç–∏ pull-to-refresh —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    }

    private fun openFlashcardSetDetail(flashcardSet: FlashcardSetWithProgress) {
        Log.d("FlashcardSetsActivity", "Opening detail for set: ${flashcardSet.flashcardSet.title}")
        Log.d("FlashcardSetsActivity", "Set ID: ${flashcardSet.flashcardSet.id}")

        val intent = Intent(this, FlashcardSetDetailActivity::class.java).apply {
            putExtra("flashcard_set_id", flashcardSet.flashcardSet.id)
            putExtra("flashcard_set_title", flashcardSet.flashcardSet.title)
            putExtra("topic_title", flashcardSet.topic?.title)
        }
        startActivityForResult(intent, REQUEST_CODE_DETAIL)
    }

    private fun startStudying(flashcardSet: FlashcardSetWithProgress) {
        if (flashcardSet.totalCards == 0) {
            Toast.makeText(this, "–í —Ü—å–æ–º—É –Ω–∞–±–æ—Ä—ñ –Ω–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è", Toast.LENGTH_SHORT).show()
            return
        }

        val intent = Intent(this, FlashcardStudyActivity::class.java).apply {
            putExtra("flashcard_set_id", flashcardSet.flashcardSet.id)
            putExtra("flashcard_set_title", flashcardSet.flashcardSet.title)
            putExtra("study_mode", "all") // "all" –∞–±–æ "new"
        }
        startActivityForResult(intent, REQUEST_CODE_STUDY)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        when (requestCode) {
            REQUEST_CODE_STUDY -> {
                if (resultCode == RESULT_OK) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è
                    viewModel.refreshData()
                    viewModel.updateStatistics()
                }
            }
            REQUEST_CODE_DETAIL -> {
                if (resultCode == RESULT_OK) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª–µ–π
                    viewModel.refreshData()
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        viewModel.refreshData()
    }

    private fun showError(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    }

    companion object {
        private const val REQUEST_CODE_STUDY = 1001
        private const val REQUEST_CODE_DETAIL = 1002
    }
}